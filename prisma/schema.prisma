generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  providerAccountId String
  userId            String  @db.ObjectId
  expires_at        Int?
  provider          String
  session_state     String?
  type              String
  access_token      String?
  id_token          String?
  refresh_token     String?
  scope             String?
  token_type        String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Address {
  address_id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  phone            String?
  address          String
  district         String
  state            String
  pincode          String
  landmark         String?
  alternate_phone  String?
  is_default       Boolean @default(true)
  is_deleted       Boolean @default(false)
  userId           String  @db.ObjectId
  locality         String
  User             User    @relation(fields: [userId], references: [id])
  Order            Order[]

  @@index([userId])
}

model Admin {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  role     String

  @@map("admin") // Map to the correct MongoDB collection name
}

model BestDeal {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String
  title       String
  description String
  url         String
  price       Float
}

model Cart {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?     @unique @db.ObjectId
  guestUserId  String?     @unique @db.ObjectId
  guestUser    GuestUser?  @relation(fields: [guestUserId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
  cartItems    CartItem[]
}
model CartItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String?  @db.ObjectId // optional if using custom product
  customProduct CustomProductJson?    // JSON field to store customized product
  quantity      Int
  cartId        String   @db.ObjectId
  color         String?
  Cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product       Product? @relation(fields: [productId], references: [id])
}
type CustomProductJson {
  title      String
  basePrice  Float
  offerPrice Float
  image      String
  options    Json // options can be dynamic key-value pairs
}


model Category {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  parentId String?     @db.ObjectId
  parent   Category?   @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Category Category[]  @relation("Category")
  Product  Product[]
  description String?
  isDeleted   Boolean?  @default(false)
  deletedAt   DateTime?
}

model GuestUser {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  expirationDate DateTime
  Cart           Cart?
}

model HeroBanner {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  basePrice   Float
  offerPrice  Float
  url         String
  imageUrl    String
  imageUrlSm  String
}

model Image {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  imagePublicId String
  productId     String  @db.ObjectId
  Product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)


  @@unique([productId, id])
}

model Order {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  orderID   String   @unique
  orderDate        DateTime    @default(now())
  packedDate       DateTime?
  deliveredDate    DateTime?
  total            Float
  userId           String      @db.ObjectId
  payment_verified Boolean     @default(false)
  status           String      @default("pending")
  addressId        String      @db.ObjectId
  Address          Address     @relation(fields: [addressId], references: [address_id])
  User             User        @relation(fields: [userId], references: [id])
  OrderItem        OrderItem[]
  Payment          Payment?
}

model OrderItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String?  @db.ObjectId // Made optional to support custom products
  quantity      Int
  color         String?
  orderId       String   @db.ObjectId
  basePrice     Float
  offerPrice    Float
  customProduct CustomProductJson?    // JSON field to store custom product data
  Order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product       Product? @relation(fields: [productId], references: [id]) // Made optional

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  rzr_order_id   String  @unique
  rzr_payment_id String  @unique
  orderId        String  @db.ObjectId @unique
  amount         Float
  method         String
  via            String
  Order          Order   @relation(fields: [orderId], references: [id])
}

model Product {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  slug             String
  title            String
  description      String
  categoryId       String      @db.ObjectId
  basePrice        Float
  offerPrice       Float
  stock            Int
  color            String?
  variantName      String?
  variantValues    String?
  createdAt        DateTime    @default(now())
  shortDescription String?
  purchases        Int         @default(0)
  keywords         String[]
  earnings         Float       @default(0)
  CartItem         CartItem[]
  Image            Image[]
  OrderItem       OrderItem[]
  Category         Category    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
isDeleted   Boolean?  @default(false)
  deletedAt   DateTime?
  @@index([slug])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  userId       String   @db.ObjectId
  User         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  gender        String?
  phone         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime  @default(now())
  image         String?
  emailVerified DateTime?
  Accounts       Account[]
  Addresses       Address[]
  Cart          Cart?
  Order         Order[]
  Sessions       Session[]
  services      Service[]
  quoteRequests QuoteRequest[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model MarqueeOffers {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  url   String
}
model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  fileUrl     String
  fileType   String
  filePublicId String  // Cloudinary public_id
  type String 
  formDetails Json     // Key-value pairs for different service forms
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status        String   @default("pending")

  @@map("services")
}
// New models for dynamic fasteners and connectors/wires
model FastenerCategory {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String            @unique
  description String?
  image       String?
  isActive    Boolean           @default(true)
  options     FastenerOption[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model FastenerOption {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String
  category    FastenerCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  label       String
  type        String          // "select", "multiselect", "text", "number"
  required    Boolean         @default(false)
  helpText    String?
  values      Json            // Array of possible values for select/multiselect
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ConnectorCategory {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String             @unique
  description String?
  image       String?
  isActive    Boolean            @default(true)
  options     ConnectorOption[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model ConnectorOption {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String
  category    ConnectorCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  label       String
  type        String            // "select", "multiselect", "text", "number"
  required    Boolean           @default(false)
  helpText    String?
  values      Json              // Array of possible values for select/multiselect
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WireCategory {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String?
  image       String?
  isActive    Boolean       @default(true)
  options     WireOption[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WireOption {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String
  category    WireCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  label       String
  type        String       // "select", "multiselect", "text", "number"
  required    Boolean      @default(false)
  helpText    String?
  values      Json         // Array of possible values for select/multiselect
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model QuoteRequest {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  items            Json
  notes            String?
  totalItems       Int
  status           String
  quotedPrice      Float?    // Quoted price from admin (use Float for MongoDB)
  adminResponse    String?   // Admin's response
  emailSent        Boolean   @default(false)
  emailOpened      Boolean   @default(false)
  responseReceived Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([status], name: "QuoteRequest_status_idx")
  @@index([userId, status], name: "QuoteRequest_userId_status_idx")
  @@index([createdAt], name: "QuoteRequest_createdAt_idx")
}
